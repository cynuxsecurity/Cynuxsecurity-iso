# as86
# Autogenerated from man page /usr/lib/jvm/default/man/man1/as86.1.gz
complete -c as86 -s 0 -d 'start with 16-bit code segment, warn for all instructions > 8086'
complete -c as86 -s 1 -d 'start with 16-bit code segment, warn for all instructions > 80186'
complete -c as86 -s 2 -d 'start with 16-bit code segment, warn for all instructions > 80286'
complete -c as86 -s 3 -d 'start with 32-bit code segment, don\'t warn for any instructions'
complete -c as86 -s a -d 'enable partial compatibility with Minix asld'
complete -c as86 -s g -d 'only put global symbols in object or symbol file'
complete -c as86 -s j -d 'replace all short jumps with similar 16 or 32 bit jumps, the 16 bit condition…'
complete -c as86 -s O -d 'this causes the assembler to add extra passes to try to use forward reference…'
complete -c as86 -s l -d 'produce list file, filename may follow'
complete -c as86 -s m -d 'print macro expansions in listing'
complete -c as86 -s n -d 'name of module follows (goes in object instead of source name)'
complete -c as86 -s o -d 'produce object file, filename follows'
complete -c as86 -s b -d 'produce a raw binary file, filename may follow'
complete -c as86 -s s -d 'produce an ASCII symbol file, filename follows'
complete -c as86 -s u -d 'assume undefined symbols are imported-with-unspecified segment'
complete -c as86 -o w- -d 'allow the assembler to print warning messages'
complete -c as86 -s t -d 'move all text segment data in segment n+3'

